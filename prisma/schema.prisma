datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  firstLogin    Boolean         @default(true)
  password      String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Exercise  Exercise[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model PasswordResetToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Profile {
  id            String    @id @default(cuid())
  userId        String
  dateOfBirth   DateTime?
  activityLevel Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuscleGroup {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exercises Exercise[] @relation("ExerciseMuscleGroups")
}

model Exercise {
  id          String  @id @default(cuid())
  name        String
  displayName String?
  description String
  createdBy   String
  isPublic    Boolean

  user User @relation(fields: [createdBy], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  muscleGroups     MuscleGroup[]     @relation("ExerciseMuscleGroups")
  workoutExercises WorkoutExercise[] // Updated relationship
}

model Workout {
  id               String            @id @default(cuid())
  name             String
  workoutDate      DateTime
  workoutExercises WorkoutExercise[] // Updated relationship
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model WorkoutExercise {
  workoutId  String
  exerciseId String
  sets       Int
  reps       Int
  sortOrder  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@id([workoutId, exerciseId])
}
